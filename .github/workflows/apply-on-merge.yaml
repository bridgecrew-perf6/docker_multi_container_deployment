name: Apply On Merge

on:
  push:
    branches:
      - main
  # pull_request:
  #   branches:
  #     - main

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        path:
          - staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ca-central-1

    - name: Prebuild
      run: |
        terraform -chdir=./ci/prebuild init
        terraform -chdir=./ci/prebuild apply --auto-approve

    - name: Run front-end tests
      run: |
        echo "Build a docker image for tests"
        docker build -t frontend-test -f ./client/Dockerfile.dev ./client
        echo "Run tests against that image"
        docker run -e CI=true frontend-test npm test
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push the front-end image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: docker_multi_container_deployment_frontend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Build the front-end production docker image"
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./client
        echo "Pushing the image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    
    - name: Build and push the nginx image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: docker_multi_container_deployment_nginx
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Build the nginx production docker image"
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./nginx
        echo "Pushing the image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    
    - name: Build and push the server image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: docker_multi_container_deployment_server
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Build the server production docker image"
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./server
        echo "Pushing the image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Build and push the worker image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: docker_multi_container_deployment_worker
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Build the worker production docker image"
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./worker
        echo "Pushing the image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"