name: Apply On Merge

on:
  push:
    branches:
      - main
  # pull_request:
  #   branches:
  #     - main

env:
  AWS_REGION: ca-central-1

jobs:
  test:
    name: Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Run front-end tests
      run: |
        echo "Build a docker image for tests"
        docker build -t frontend-test -f ./client/Dockerfile.dev ./client
        echo "Run tests against that image"
        docker run -e CI=true frontend-test npm test

  prebuild:
    name: Prebuild
    runs-on: ubuntu-latest
  
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: $AWS_REGION

    - name: Create AWS ECR repos
      run: |
        terraform -chdir=./ci/prebuild init
        terraform -chdir=./ci/prebuild apply --auto-approve

  build:
    name: Build Artifact
    runs-on: ubuntu-latest
    needs: [prebuild, test]
    strategy:
      matrix:
        module:
          - client
          - nginx
          - server
          - worker

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: $AWS_REGION
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build the module and push its image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: docker_multi_container_deployment_${{ matrix.module }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Build the module production docker image"
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./${{ matrix.module }}
        echo "Pushing the image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deployStaging:
    name: Deploy to Staging ENV
    runs-on: ubuntu-latest
    needs: [build]
  
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: $AWS_REGION

    - name: Build AWS resources for staging
      run: |
        terraform -chdir=./ci/deploy/staging init -backend-config=../backend-staging.tf
        terraform -chdir=./ci/deploy/staging apply --auto-approve
    
    - name: Generate deployment package
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      run: |
        sed 's/AWS_ACCOUNT_ID/'"$AWS_ACCOUNT_ID"'/g' docker-compose-prod.yml > docker-compose.yml
        zip -r deploy.zip ./docker-compose.yml

    - name: Deploy latest Docker images to EB
      uses: einaregilsson/beanstalk-deploy@v20
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
        aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
        application_name: docker_multi_container_deployment
        environment_name: Dockermulticontainerdeployment-staging
        region: $AWS_REGION
        version_label: ${{ github.sha }}
        deployment_package: deploy.zip
