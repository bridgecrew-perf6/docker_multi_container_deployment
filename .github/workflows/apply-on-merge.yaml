name: Apply On Merge

on:
  push:
    branches:
      - main
  # pull_request:
  #   branches:
  #     - main

env:
  AWS_REGION: ca-central-1
  PROJECT_NAME: docker_multi_container_deployment
  BEANSTALK_ENVIRONMENT: Dockermulticontainerdeployment-staging

jobs:
  prebuild:
    name: Prebuild
    runs-on: ubuntu-latest
  
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create AWS ECR repos
      env:
        PROJECT_NAME: ${{ env.PROJECT_NAME }}
      run: |
        terraform -chdir=./ci/prebuild init
        terraform -chdir=./ci/prebuild apply --auto-approve -var 'project='"$PROJECT_NAME"'' -var 'project_modules=["client", "nginx", "server", "worker"]'
      # To be improved: only one source of truth for project modules

  build:
    name: Build project module
    runs-on: ubuntu-latest
    needs: [prebuild]
    strategy:
      matrix:
        module:
          - client
          - nginx
          - server
          - worker

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Run tests
      if: ${{ matrix.module == 'client' }}
      run: |
        echo "Build a docker image for tests"
        docker build -t client-test -f ./client/Dockerfile.dev ./client
        echo "Run tests against that image"
        docker run -e CI=true client-test npm test

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push the image for the module to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.PROJECT_NAME }}_${{ matrix.module }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Build the module production docker image"
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./${{ matrix.module }}
        echo "Pushing the image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deployStaging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
  
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Build AWS resources for staging
      env:
        PROJECT_NAME: ${{ env.PROJECT_NAME }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        BEANSTALK_ENVIRONMENT: ${{ env.BEANSTALK_ENVIRONMENT }}
      run: |
        terraform -chdir=./ci/deploy/staging init -backend-config=../backend-staging.tf
        terraform -chdir=./ci/deploy/staging apply --auto-approve -var 'project='"$PROJECT_NAME"'' -var 'postgres_password='"$POSTGRES_PASSWORD"'' -var 'beanstalk_environment='"$BEANSTALK_ENVIRONMENT"''
    
    - name: Generate deployment package
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        IMAGE_TAG: ${{ github.sha }}
        AWS_REGION: ${{ env.AWS_REGION }}
        PROJECT_NAME: ${{ env.PROJECT_NAME }}
      run: |
        cp docker-compose-prod.yml docker-compose-prod.editing.yml
        sed -i 's/AWS_ACCOUNT_ID/'"$AWS_ACCOUNT_ID"'/g' docker-compose-prod.editing.yml
        sed -i 's/IMAGE_TAG/'"$IMAGE_TAG"'/g' docker-compose-prod.editing.yml
        sed -i 's/AWS_REGION/'"$AWS_REGION"'/g' docker-compose-prod.editing.yml
        sed -i 's/PROJECT_NAME/'"$PROJECT_NAME"'/g' docker-compose-prod.editing.yml
        mv docker-compose-prod.editing.yml docker-compose.yml
        zip -r deploy.zip ./docker-compose.yml

    - name: Deploy latest Docker images to EB
      uses: einaregilsson/beanstalk-deploy@v20
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
        aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
        application_name: ${{ env.PROJECT_NAME }}
        environment_name: ${{ env.BEANSTALK_ENVIRONMENT }}
        region: ${{ env.AWS_REGION }}
        version_label: ${{ github.sha }}
        deployment_package: deploy.zip
